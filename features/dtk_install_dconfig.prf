# This prf file is used to deploy files that dconfig's meta and override configure.
#
# get enviroment `$$DSG_DATA_DIR` 's value, itâ€™s consistent with class DConfigFile code.
defineReplace(getDSGDataDir) {
    isEmpty($$DSG_DATA_DIR) return ("/usr/share/dsg")
    return ($$DSG_DATA_DIR)
}


# deploy some `meta` 's configure.
#
# files       - deployed files.
# base        - used to get subpath, if it's empty, only copy files, and ignore it's subpath structure.
# appid       - working for the app, if it's empty, depending on `TEMPLATE`.
# commonid    - working for common, if it's empyt, depending on `TEMPLATE`.
# use_opt_dir - using uos standard to install destination directory.
#
# e.g:
# dconfig_example.files += \
#     $$PWD/configs/dconf-example.json \
#     $$PWD/configs/a/dconf-example.json
# dconfig_example.base = $$PWD/configs
# dconfig_example.appid = $$TARGET
#
# dconfig_example2.files += $$PWD/configs/a/dconf-example.json
#
# DCONFIG_META_FILES += dconfig_example dconfig_example2
#
for(metaitem, DCONFIG_META_FILES) {
    eval(dconfig_meta_$${metaitem}.files = $$eval($${metaitem}.files))
    eval(dconfig_meta_$${metaitem}.base = $$eval($${metaitem}.base))
    isEmpty($${metaitem}.appid) {
        isEmpty($${metaitem}.commonid) {
            equals(TEMPLATE, app) {
                !isEmpty($${metaitem}.use_opt_dir) {
                    eval(dconfig_meta_$${metaitem}.path = /opt/apps/$$TARGET/files/schemas/configs)
                 } else {
                    eval(dconfig_meta_$${metaitem}.path = /usr/share/dsg/apps/$$TARGET/configs)
                 }
            } else {
                eval(dconfig_meta_$${metaitem}.path = $$getDSGDataDir()/configs/)
            }
        } else {
            eval(dconfig_meta_$${metaitem}.path = $$getDSGDataDir()/configs/)
        }
    } else {
        !isEmpty($${metaitem}.use_opt_dir) {
            eval(dconfig_meta_$${metaitem}.path = /opt/apps/$$eval($${overrideitem}.appid/files/schemas/configs))
        } else {
            eval(dconfig_meta_$${metaitem}.path = /usr/share/dsg/apps/$$eval($${overrideitem}.appid/configs))
        }
    }
    INSTALLS += dconfig_meta_$${metaitem}
}


# deploy some `meta` 's override configure.
#
# configuration for the `meta_name` 's  override configure.
#
# files       - deployed files.
# base        - used to get subpath, if it's empty, only copy files, and ignore it's subpath structure.
# appid       - working for the app, if it's empty, working for all app.
# meta_name   - override for the meta configure.
#
# e.g :
# dconfig_example.files += \
#     $$PWD/configs/dconf-example.override.json \
#     $$PWD/configs/a/dconf-example.override.a.json
# dconfig_example.base = $$PWD/configs
# dconfig_example.meta_name = example
# dconfig_example.appid = $$TARGET
#
# dconfig_example2.files += $$PWD/configs/a/dconf-example.override.a.json
# dconfig_example2.meta_name = example2
#
# DCONFIG_OVERRIDE_FILES += dconfig_example dconfig_example2
#
for(overrideitem, DCONFIG_OVERRIDE_FILES) {
    eval(dconfig_override_$${overrideitem}.files = $$eval($${overrideitem}.files))
    eval(dconfig_override_$${overrideitem}.base = $$eval($${overrideitem}.base))
    isEmpty($${overrideitem}.meta_name) : error("Please set meta_name for the override configuration." $${overrideitem})
    isEmpty($${overrideitem}.appid) {
        eval(dconfig_override_$${overrideitem}.path = $$getDSGDataDir()/configs/overrides/$$eval($${overrideitem}.meta_name))
    } else {
        eval(dconfig_override_$${overrideitem}.path = $$getDSGDataDir()/configs/overrides/$$eval($${overrideitem}.appid)/$$eval($${overrideitem}.meta_name))
    }
    INSTALLS += dconfig_override_$${overrideitem}
}
